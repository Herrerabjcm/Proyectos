using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System.Collections.Generic;
using System.Linq;

var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
var app = builder.Build();

List<Product> inventory = new List<Product>();

app.MapPost("/api/productos", (Product product) =>
{
    inventory.Add(product);
    return Results.Created($"/api/productos/{product.Id}", product);
});

app.MapGet("/api/productos", () => inventory);

app.MapGet("/api/productos/categoria/{categoria}", (string categoria) =>
{
    return inventory.Where(p => p.Categoria.ToLower() == categoria.ToLower()).ToList();
});

app.MapGet("/api/productos/reporte", () =>
{
    return inventory.Select(p => new { p.Nombre, p.Cantidad }).ToList();
});

app.MapPut("/api/productos/{id}", (int id, Product updatedProduct) =>
{
    var index = inventory.FindIndex(p => p.Id == id);
    if (index == -1) return Results.NotFound();
    inventory[index] = updatedProduct;
    return Results.Ok(updatedProduct);
});

app.MapDelete("/api/productos/{id}", (int id) =>
{
    var product = inventory.FirstOrDefault(p => p.Id == id);
    if (product == null) return Results.NotFound();
    inventory.Remove(product);
    return Results.Ok();
});

app.Run();

record Product(int Id, string Nombre, int Cantidad, string Categoria);
